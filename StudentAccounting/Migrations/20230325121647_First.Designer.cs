// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentAccounting.Model;

#nullable disable

namespace StudentAccounting.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    [Migration("20230325121647_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.ApplicationsInTheProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("ParticipantsId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VacancyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantsId");

                    b.HasIndex("VacancyId");

                    b.ToTable("ApplicationsInTheProjects");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.Employment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdMentor")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantsId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isActive")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantsId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateEnd = new DateTime(2023, 4, 24, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(2026),
                            DateStart = new DateTime(2023, 3, 25, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(2025),
                            ParticipantsId = 1,
                            PositionId = 1,
                            Status = "Active",
                            StatusDescription = "Description 1",
                            isActive = "Yes"
                        },
                        new
                        {
                            Id = 2,
                            DateEnd = new DateTime(2023, 4, 24, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(2035),
                            DateStart = new DateTime(2023, 3, 25, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(2035),
                            ParticipantsId = 2,
                            PositionId = 2,
                            Status = "Active",
                            StatusDescription = "Description 2",
                            isActive = "Yes"
                        });
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.FinalProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmploymentId")
                        .HasColumnType("int");

                    b.Property<string>("GitHub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Links")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentId");

                    b.ToTable("FinalProjects");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.Regulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Regulations");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.StagesOfProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("StagesOfProjects");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.TrainingCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LectorDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LectorFIO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingCourses");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RatingCoefficient")
                        .HasColumnType("float");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StagesOfProjectId")
                        .HasColumnType("int");

                    b.Property<bool>("isOpened")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StagesOfProjectId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BonusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BonusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bonuses");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateStart = new DateTime(2023, 3, 25, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(1948),
                            Description = "Description 1",
                            DirectorId = 1,
                            FullName = "Department 1",
                            OrganizationId = 1,
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            DateStart = new DateTime(2023, 3, 25, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(1965),
                            Description = "Description 2",
                            DirectorId = 2,
                            FullName = "Department 2",
                            OrganizationId = 2,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Individuals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialNetwork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2023, 3, 25, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(2057),
                            FIO = "первый",
                            Gender = "aaa",
                            Mail = "aaa",
                            Phone = "aaa",
                            SocialNetwork = "aaa"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2023, 3, 25, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(2059),
                            FIO = "второй",
                            Gender = "aaa",
                            Mail = "aaa",
                            Phone = "aaa",
                            SocialNetwork = "aaa"
                        });
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("BSR")
                        .HasColumnType("float");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FoundationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "aaa",
                            BSR = 4.5,
                            Contacts = "aaa",
                            FoundationDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Первый",
                            WebSite = "aaa"
                        },
                        new
                        {
                            Id = 2,
                            Address = "aaa",
                            BSR = 4.5,
                            Contacts = "aaa",
                            FoundationDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Второй",
                            WebSite = "aaa"
                        });
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Participants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateExit")
                        .HasColumnType("datetime2");

                    b.Property<string>("GitHub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndividualsId")
                        .HasColumnType("int");

                    b.Property<int>("Mmr")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndividualsId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateEntry = new DateTime(2023, 3, 25, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(2005),
                            GitHub = "github.com/user1",
                            IndividualsId = 1,
                            Mmr = 1000,
                            Status = "Active",
                            UserId = 0
                        },
                        new
                        {
                            Id = 2,
                            DateEntry = new DateTime(2023, 3, 25, 15, 16, 47, 484, DateTimeKind.Local).AddTicks(2007),
                            GitHub = "github.com/user2",
                            IndividualsId = 2,
                            Mmr = 1200,
                            Status = "Active",
                            UserId = 0
                        });
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            Description = "Description 1",
                            FullName = "Position 1"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 2,
                            Description = "Description 2",
                            FullName = "Position 2"
                        });
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicalSpecification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("idLocalPM")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxMmr")
                        .HasColumnType("int");

                    b.Property<int>("MinMmr")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "aaa",
                            MaxMmr = 999,
                            MinMmr = 1,
                            OrganizationId = 1,
                            RankName = "Первый"
                        },
                        new
                        {
                            Id = 2,
                            Description = "bbb",
                            MaxMmr = 999,
                            MinMmr = 1,
                            OrganizationId = 2,
                            RankName = "Второй"
                        });
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndividualsId")
                        .HasColumnType("int");

                    b.Property<long>("StudentCard")
                        .HasColumnType("bigint");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualsId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.EducationalPortals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("EducationalPortals");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.RankBonus", b =>
                {
                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.Property<int>("BonusId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("RankId", "BonusId");

                    b.HasIndex("BonusId");

                    b.ToTable("RankBonus", (string)null);
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.RegistrationForCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEntry")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParticipantsId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingCoursesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantsId");

                    b.HasIndex("TrainingCoursesId");

                    b.ToTable("RegistrationForCourses");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<string>("NormalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = 1,
                            NormalName = "Application user"
                        },
                        new
                        {
                            Id = 2,
                            Name = 2,
                            NormalName = "User with additional rights"
                        },
                        new
                        {
                            Id = 3,
                            Name = 3,
                            NormalName = "Pm which has limited access to the table"
                        },
                        new
                        {
                            Id = 4,
                            Name = 4,
                            NormalName = "Local Pm has limited access to one table"
                        },
                        new
                        {
                            Id = 5,
                            Name = 5,
                            NormalName = "Has access to editing the tables of his department"
                        },
                        new
                        {
                            Id = 6,
                            Name = 6,
                            NormalName = "Has access to editing the tables of his department and registration users"
                        });
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.ScheduleOfСlasses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingCoursesId")
                        .HasColumnType("int");

                    b.Property<string>("WorkSpaceLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TrainingCoursesId");

                    b.ToTable("ScheduleOfСlasses");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.ApplicationsInTheProject", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Participants", "Participants")
                        .WithMany("ApplicationsInTheProjects")
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAccountin.Model.DatabaseModels.Vacancy", "Vacancy")
                        .WithMany("ApplicationsInTheProjects")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participants");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.Employment", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Participants", "Participants")
                        .WithMany("Employments")
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAccounting.Model.DataBaseModels.Position", "Position")
                        .WithMany("Employments")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participants");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.FinalProject", b =>
                {
                    b.HasOne("StudentAccountin.Model.DatabaseModels.Employment", "Employment")
                        .WithMany("FinalProjects")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employment");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.Regulation", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Organization", "Organization")
                        .WithMany("Regulations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.StagesOfProject", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Project", "Project")
                        .WithMany("StagesOfProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.Vacancy", b =>
                {
                    b.HasOne("StudentAccountin.Model.DatabaseModels.StagesOfProject", "StagesOfProject")
                        .WithMany("Vacancy")
                        .HasForeignKey("StagesOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StagesOfProject");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Department", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Organization", "Organizations")
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Participants", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Individuals", "Individuals")
                        .WithOne("Participants")
                        .HasForeignKey("StudentAccounting.Model.DataBaseModels.Participants", "IndividualsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAccounting.Model.DataBaseModels.User", "User")
                        .WithOne("Participants")
                        .HasForeignKey("StudentAccounting.Model.DataBaseModels.Participants", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Individuals");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Position", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Project", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Rank", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Organization", "Organizations")
                        .WithMany("Ranks")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Student", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Individuals", "Individuals")
                        .WithOne("Student")
                        .HasForeignKey("StudentAccounting.Model.DataBaseModels.Student", "IndividualsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.User", b =>
                {
                    b.HasOne("StudentAccounting.Model.DatabaseModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.EducationalPortals", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Department", "Department")
                        .WithMany("EducationalPortals")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.RankBonus", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Bonus", "Bonus")
                        .WithMany("RankBonus")
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAccounting.Model.DataBaseModels.Rank", "Rank")
                        .WithMany("RankBonus")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bonus");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.RefreshToken", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.User", "User")
                        .WithMany("RefreshToken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.RegistrationForCourses", b =>
                {
                    b.HasOne("StudentAccounting.Model.DataBaseModels.Participants", "Participants")
                        .WithMany("RegistrationForCourses")
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentAccountin.Model.DatabaseModels.TrainingCourses", "TrainingCourses")
                        .WithMany("RegistrationForCourses")
                        .HasForeignKey("TrainingCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participants");

                    b.Navigation("TrainingCourses");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.ScheduleOfСlasses", b =>
                {
                    b.HasOne("StudentAccountin.Model.DatabaseModels.TrainingCourses", "TrainingCourses")
                        .WithMany("ScheduleOfСlasses")
                        .HasForeignKey("TrainingCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingCourses");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.Employment", b =>
                {
                    b.Navigation("FinalProjects");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.StagesOfProject", b =>
                {
                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.TrainingCourses", b =>
                {
                    b.Navigation("RegistrationForCourses");

                    b.Navigation("ScheduleOfСlasses");
                });

            modelBuilder.Entity("StudentAccountin.Model.DatabaseModels.Vacancy", b =>
                {
                    b.Navigation("ApplicationsInTheProjects");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Bonus", b =>
                {
                    b.Navigation("RankBonus");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Customer", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Department", b =>
                {
                    b.Navigation("EducationalPortals");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Individuals", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Organization", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Ranks");

                    b.Navigation("Regulations");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Participants", b =>
                {
                    b.Navigation("ApplicationsInTheProjects");

                    b.Navigation("Employments");

                    b.Navigation("RegistrationForCourses");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Position", b =>
                {
                    b.Navigation("Employments");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Project", b =>
                {
                    b.Navigation("StagesOfProjects");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.Rank", b =>
                {
                    b.Navigation("RankBonus");
                });

            modelBuilder.Entity("StudentAccounting.Model.DataBaseModels.User", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("StudentAccounting.Model.DatabaseModels.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
